var L3 = L3 || {};var Chance = require(getFolder('path') + 'Libraries/chance.js');L3.chance = new Chance();L3.generatePerson = function generatePerson(family, role, last) {	var p;		p = ds.Person.createEntity();		switch (role) {		case 'mother':			p.lastName = L3.chance.bool({likelihood: 80}) ? family.name :  L3.chance.last();			p.gender = 'Female';			p.firstName = L3.chance.first(p.gender);			p.middleName = L3.chance.middle(p.gender);			p.nickname = L3.chance.bool({likelihood: 90}) ? p.firstName : p.middleName;			p.race = family.motherRace;			p.birthdate = L3.chance.birthday({type: 'adult'});			p.relationship = 'Mother';			p.homeAddressSameAsMain = L3.chance.bool({likelihood: 90});			p.workStreet1 = L3.chance.address();			p.workStreet2 = L3.chance.bool({likelihood: 30}) ? 'Suite ' + (L3.chance.integer({min: 10, max: 300}) * 10).toString() : '';			p.workCity = L3.chance.city();			p.workState = L3.chance.state();			p.workZipCode = L3.chance.zip();			p.homePhone = L3.chance.bool({likelihood: 90}) ? L3.chance.phone() : '';			p.workPhone = L3.chance.bool({likelihood: 60}) ? L3.chance.phone() : '';			p.cellPhone = L3.chance.bool({likelihood: 40}) ? L3.chance.phone() : '';			p.homeEmail = L3.chance.bool({likelihood: 70}) ? L3.chance.email() : '';			p.workEmail = L3.chance.bool({likelihood: 60}) ? L3.chance.email() : '';			family.mother = p;			break;		case 'father':			p.lastName = family.name;			p.gender = 'Male';			p.firstName = L3.chance.first(p.gender);			p.middleName = L3.chance.middle(p.gender);			p.nickname = L3.chance.bool({likelihood: 90}) ? p.firstName : p.middleName;			p.race = family.fatherRace;			p.birthdate = L3.chance.birthday({type: 'adult'});			p.relationship = 'Father';			p.workStreet1 = L3.chance.address();			p.workStreet2 = L3.chance.bool({likelihood: 30}) ? 'Suite ' + (L3.chance.integer({min: 10, max: 300}) * 10).toString() : '';			p.workCity = L3.chance.city();			p.workState = L3.chance.state();			p.workZipCode = L3.chance.zip();			p.homePhone = L3.chance.bool({likelihood: 90}) ? L3.chance.phone() : '';			p.workPhone = L3.chance.bool({likelihood: 60}) ? L3.chance.phone() : '';			p.cellPhone = L3.chance.bool({likelihood: 40}) ? L3.chance.phone() : '';			p.homeEmail = L3.chance.bool({likelihood: 70}) ? L3.chance.email() : '';			p.workEmail = L3.chance.bool({likelihood: 60}) ? L3.chance.email() : '';			family.father = p;			break;		case 'guardian':			p.lastName = L3.chance.last();			p.firstName = L3.chance.first();			p.gender = L3.chance.gender(p.firstName);			p.middleName = L3.chance.middle(p.gender);			p.nickname = L3.chance.bool({likelihood: 90}) ? p.firstName : p.middleName;			p.race = null;			p.relationship = 'Guardian';			p.workStreet1 = L3.chance.address();			p.workStreet2 = L3.chance.bool({likelihood: 30}) ? 'Suite ' + (L3.chance.integer({min: 10, max: 300}) * 10).toString() : '';			p.workCity = L3.chance.city();			p.workState = L3.chance.state();			p.workZipCode = L3.chance.zip();			p.homePhone = L3.chance.bool({likelihood: 90}) ? L3.chance.phone() : '';			p.workPhone = L3.chance.bool({likelihood: 60}) ? L3.chance.phone() : '';			p.cellPhone = L3.chance.bool({likelihood: 40}) ? L3.chance.phone() : '';			p.homeEmail = L3.chance.bool({likelihood: 70}) ? L3.chance.email() : '';			p.workEmail = L3.chance.bool({likelihood: 60}) ? L3.chance.email() : '';			family.guardian = p;			break;		case 'child':			p.lastName = L3.chance.bool({likelihood: 95}) ? family.name :  L3.chance.last();			p.firstName = L3.chance.first();			p.gender = L3.chance.gender(p.firstName);			p.middleName = L3.chance.middle(p.gender);			p.nickname = L3.chance.bool({likelihood: 90}) ? p.firstName : p.middleName;			p.race = L3.generateRace(family.motherRace, family.fatherRace);			p.livesWith = L3.generateLivesWith(family);			p.birthdate = L3.chance.bool({likelihood: 70}) ? L3.chance.birthday({type: 'child'}) : L3.chance.birthday({type: 'teen'});			p.childOf = family;			p.homeAddressSameAsMain = true;			p.cellPhone = L3.chance.bool({likelihood: 40}) ? L3.chance.phone() : '';			p.homeEmail = L3.chance.bool({likelihood: 70}) ? L3.chance.email() : '';			p.relationship = 'Child';			break;		case 'twin':			p.lastName = last.lastName;			p.gender = last.gender;			p.firstName = L3.chance.first(p.gender);			p.middleName = L3.chance.middle(p.gender);			p.nickname = L3.chance.bool({likelihood: 90}) ? p.firstName : p.middleName;			p.race = last.race;			p.livesWith = last.livesWith;			p.birthdate = last.birthdate;			p.isMultiple = true;			p.childOf = family;			p.homeAddressSameAsMain = true;			p.cellPhone = L3.chance.bool({likelihood: 40}) ? L3.chance.phone() : '';			p.homeEmail = L3.chance.bool({likelihood: 70}) ? L3.chance.email() : '';			p.relationship = 'Child';			break;	}		if (p.homeAddressSameAsMain) {		p.homeStreet1 = family.mainStreet1;		p.homeCity = family.mainCity;		p.homeState = family.mainState;		p.homeZipCode = family.mainZipCode;			}	else {		p.homeStreet1 = L3.chance.address();		p.homeCity = L3.chance.city();		p.homeState = L3.chance.state();		p.homeZipCode = L3.chance.zip();			}		p.save();		return p;}L3.generateRace = function generateRace(motherRace, fatherRace) {	var race;		if (typeof motherRace === 'undefined') {		if (L3.chance.bool({likelihood: 60})) {			race = 'White';		}		else {			if (L3.chance.bool({likelihood: 60})) {				race = 'Hispanic';			}			else {				race = 'Black';			}		}	}	else {		if (typeof fatherRace === 'undefined') {			race = L3.chance.bool({likelihood: 95}) ? motherRace : L3.generateRace();		}		else {			if (motherRace === fatherRace) {				race = motherRace;			}			else {				race = L3.chance.bool() ? motherRace : fatherRace;			}		}	}		return race;}L3.generateNumberOfKids = function generateNumberOfKids() {	return L3.chance.bool({likelihood: 90}) ? L3.chance.integer({min: 1, max: 3}) : L3.chance.integer({min: 4, max: 5});}L3.generateMaritalStatus = function generateMaritalStatus(spouseStatus) {	var maritalStatus;		if (typeof spouseStatus === 'undefined') {			if (L3.chance.bool({likelihood: 60})) {			maritalStatus = 'Married';		}		else {			if (L3.chance.bool({likelihood: 60})) {				maritalStatus = 'Divorced';			}			else {				if (L3.chance.bool({likelihood: 90})) {					maritalStatus = 'Single';				}				else {					maritalStatus = null;				}			}		}	}	else {		if (spouseStatus === 'Single') {			maritalStatus = null;		}		else {			if (spouseStatus === null) {				maritalStatus = L3.chance.bool({likelihood: 90}) ? 'Single' : null;			}			else {				maritalStatus = spouseStatus;			}		}	}		return maritalStatus;}L3.generateLivesWith = function generateLivesWith(family) {	var livesWith;		switch (family.motherMaritalStatus) {		case 'Married':			if (L3.chance.bool({likelihood: 90})) {				livesWith = 'Both Parents';			}			else {				if (L3.chance.bool({likelihood: 80})) {					livesWith = 'Mother';				}				else {					livesWith = 'Father';				}			}			break;		case 'Divorced':			if (L3.chance.bool({likelihood: 90})) {				livesWith = 'Mother';			}			else {				livesWith = 'Father';			}			break;		default:			if (family.mother !== null) {				livesWith = 'Mother';			}			else {				if (family.father !== null) {					livesWith = 'Father';				}				else {					livesWith = 'Guardian';				}			}	}		return livesWith;}L3.generateFamily = function generateFamily() {	var family, k, last;		family = ds.Family.createEntity();		family.name = L3.chance.last();	family.mainStreet1 = L3.chance.address();	family.mainCity = L3.chance.city();	family.mainState = L3.chance.state();	family.mainZipCode = L3.chance.zip();		family.primaryPhone = L3.chance.phone();	family.secondaryPhone = L3.chance.bool({likelihood: 30}) ? L3.chance.phone() : '';			if (L3.chance.bool({likelihood: 15})) {		family.federalPovertyLevelStatus = 'Free';	}	else {		if (L3.chance.bool({likelihood: 10})) {			family.federalPovertyLevelStatus = 'Reduced';		}		else {			family.federalPovertyLevelStatus = 'None';		}	}		family.motherMaritalStatus = L3.generateMaritalStatus();	family.fatherMaritalStatus = L3.generateMaritalStatus(family.motherMaritalStatus);	if (family.motherMaritalStatus === 'Divorced') {		family.childCustody = L3.chance.bool({likelihood: 40}) ? 'Joint' : (L3.chance.bool({likelihood: 90}) ? 'Mother' : 'Father');	}		family.motherRace = L3.generateRace();	family.fatherRace = L3.generateRace(family.motherRace);		family.nativeLanguage = (family.motherRace === 'Hispanic' && L3.chance.bool({likelihood: 70})) ? 'Spanish' : 'English';	family.languageSpokenAtHome = (family.nativeLanguage === 'Hispanic' && L3.chance.bool({likelihood: 80})) ? 'Spanish' : 'English';	if (family.motherMaritalStatus === null) {		if (family.fatherMaritalStatus === null) {			family.applier = 'Guardian';			family.guardianRelationship = L3.chance.bool() ? 'Grandparent' : 'Foster Parent';			family.guardian = L3.generatePerson(family, 'guardian');		}		else {			family.applier = 'Father';			family.father = L3.generatePerson(family, 'father');		}	}	else {		family.applier = 'Mother';		family.mother = L3.generatePerson(family, 'mother');		if (family.fatherMaritalStatus !== null) {			family.father = L3.generatePerson(family, 'father');		}	}		for (k = 0; k < L3.generateNumberOfKids(); k += 1) {		if (k === 0) {			last = L3.generatePerson(family, 'child');		}		else {			if (L3.chance.bool({likelihood: 4})) {				last.isMultiple = true;				last.save();							last = L3.generatePerson(family, 'twin', last);							}			else {				last = L3.generatePerson(family, 'child');			}		}	}		family.save();}L3.generateMockData = function generateMockData() {	var max_families = 1000;	var indx;	for (indx = 0; indx < max_families; indx += 1) {		L3.generateFamily();	}}